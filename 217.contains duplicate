Description: 

Brute force :O(n2) as time complexity and O(1) as space complexity
In bf 2 loops i and j will be used . Take  i and compare with all . If repeated then pass true else false

sorting method: this has O(nlogn) as time and O(1) as space
i and i+1 are compared , if same then return true else false

hash map menthod: this has O(n) as time and space complexity
a hash map is created and values are counted then checked for more than 1 , if exist return true else false
-------------------------------------------------------------------------------------------------------

# approached for this problem has been recorded
class Solution:
    def containsDuplicate(self, nums: List[int]) -> bool:
        # with O(1) time and space complexity
        # there is an one line approach for items
        return len(nums)!=len(set(nums))
        ---------------------------------------------------------------
        '''
        # this uses O(n) memory and O(n) time
        # one of the approach to use a set which consumes extra space
        hs=set()

        for n in nums:
            if n in hs:
                return True
            else:
                hs.add(n)
        return False            
     ------------------------------------------------------------
     # this uses O(n) memory and O(n) time
        # another approach is to create a dictionary consuming space
        hm={}

        for i in range(len(nums)):
            hm[nums[i]]=hm.get(nums[i],0)+1
        for n,c in hm.items():
            if c!=1:
                return True
        return False '''     
